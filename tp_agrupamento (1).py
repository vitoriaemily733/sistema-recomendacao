# -*- coding: utf-8 -*-
"""tp_agrupamento

Autoinal file is located at
    https://colab.research.google.com/drive/177vfhs7rkHC6SGuDxpDjA65nktSxIRTr
"""
matically generated by Colab.

Orig
import numpy as np
from sklearn.cluster import KMeans

import pandas as pd
#1 passo:especificar o caminho do arquivo 
caminho_arquivo = '/content/filmes_100_usuarios.csv'

#2 passo:ler o CVS usando pandas 
df = pd.read_csv(caminho_arquivo)

#exibir o cabeçalho do arquivo para verificar se foi lido corretamente 
print(df.head())

#matriz simples de avaliações dos filmes
filmes_assistidos = df.drop(columns=["Unnamed: 0"]).values


#treinar o modelo
num_clusters = 2
kmeans = KMeans(n_clusters=num_clusters,
                random_state=0,n_init=10)
#treinar o modelo
kmeans.fit(filmes_assistidos)

#classificando os usuarios
grupos_indice = kmeans.predict(filmes_assistidos)

#exibir dados
print("usuario pertence ao seguinte grupo:")
for i, cluster in enumerate(grupos_indice):
  print(f"usuario {i+1} pertence ao grupo {cluster+1}")

  print("\nfilmes assistidos:")
  for i in range(len(filmes_assistidos)):
    assistidos = np.where(filmes_assistidos[i]== 1) [0] + 1
    print(f"usuario  {i+1} assistiu aos filmes: {assistidos}")
#função que recomenda filmes
def recomendar_filmes(filmes, filmes_assistidos,grupos_indice):
  filmes = np.array(filmes)

  #encontrar o grupo do usuario com base em seu vetor de filmes assistidos
  usuario_id = len(filmes_assistidos)
  grupos_usuarios = kmeans.predict([filmes])[0]

  #encontrar todos os usuarios no mesmo tempo
  usuarios_no_mesmo_grupo = [i for i in range (len(grupos_indice))
  if grupos_indice[i] == grupos_usuarios]

  #filmes assistidos pelos usuarios no mesmo grupo
  filmes_recomendados = set()
  for usuario in usuarios_no_mesmo_grupo:
    filmes_assistidos_usuario = np.where(filmes_assistidos[usuario] == 1)[0]
    filmes_recomendados.update(filmes_assistidos_usuario)

  #remover filmes que o usuario já assistiu
  filmes_recomendados = filmes_recomendados - set(np.where(filmes == 1)[0])

  # ajustar os indices dos filmes recomendados (de volta para 1-based)
  filmes_recomendados = [filme + 1 for filme in filmes_recomendados]

  return sorted(filmes_recomendados)

# exemplo de uso da função recomendar_filmes
filmes_assistidos_usuarios = [1, 0, 1, 0, 0, 0,1, 0, 0, 0]# vetor de filmes
# assistidos (por exemplo, assistiu aos filmes 1 e 3 )
filmes_recomendados = recomendar_filmes(filmes_assistidos_usuarios,filmes_assistidos, grupos_indice)

print(f"\nfilmes recomendados: {filmes_recomendados}")